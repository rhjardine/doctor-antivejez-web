// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELS

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(MEDICO)
  avatar    String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  patients  Patient[]
}

model Patient {
  id               String             @id @default(cuid())
  controlNumber    Int                @default(autoincrement())
  userId           String
  photo            String?
  nationality      String
  identification   String             @unique
  historyDate      DateTime
  lastName         String
  firstName        String
  birthDate        DateTime
  chronologicalAge Int
  gender           Gender
  birthPlace       String
  phone            String
  maritalStatus    String
  profession       String
  country          String
  state            String
  city             String
  address          String
  bloodType        String
  email            String
  observations     String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  biophysicsTests  BiophysicsTest[]
  biochemistryTests BiochemistryTest[] // Relaci칩n a침adida
  appointments     Appointment[]      // Relaci칩n a침adida
}

model BiophysicsTest {
  id                  String   @id @default(cuid())
  patientId           String
  chronologicalAge    Float
  biologicalAge       Float
  differentialAge     Float
  gender              String
  isAthlete           Boolean  @default(false)
  fatPercentage       Float?
  fatAge              Float?
  bmi                 Float?
  bmiAge              Float?
  digitalReflexes     Float?
  reflexesAge         Float?
  visualAccommodation Float?
  visualAge           Float?
  staticBalance       Float?
  balanceAge          Float?
  skinHydration       Float?
  hydrationAge        Float?
  systolicPressure    Float?
  systolicAge         Float?
  diastolicPressure   Float?
  diastolicAge        Float?
  testDate            DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  patient             Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model BiochemistryTest {
  id                  String   @id @default(cuid())
  patientId           String
  testDate            DateTime @default(now())
  chronologicalAge    Float
  biochemicalAge      Float
  differentialAge     Float
  somatomedin         Float?
  somatomedinAge      Float?
  hba1c               Float?
  hba1cAge            Float?
  insulin             Float?
  insulinAge          Float?
  postPrandial        Float?
  postPrandialAge     Float?
  tgHdlRatio          Float?
  tgHdlRatioAge       Float?
  dhea                Float?
  dheaAge             Float?
  homocysteine        Float?
  homocysteineAge     Float?
  psa                 Float?
  psaAge              Float?
  fsh                 Float?
  fshAge              Float?
  boneDensitometry    Float?
  boneDensitometryAge Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  patient             Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        String            @id @default(cuid())
  patientId String
  date      DateTime
  reason    String
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  patient   Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Board {
  id        String   @id @default(cuid())
  rangeId   Int
  type      String   @default("FORM_BIOPHYSICS")
  name      String
  minValue  Float
  maxValue  Float
  inverse   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  range     Range    @relation(fields: [rangeId], references: [id])
}

model Range {
  id        Int      @id @default(autoincrement())
  minAge    Float
  maxAge    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boards    Board[]
}

// ENUMS

enum Role {
  MEDICO
  ADMINISTRATIVO
  PACIENTE
}

enum Gender {
  MASCULINO
  FEMENINO
  MASCULINO_DEPORTIVO
  FEMENINO_DEPORTIVO
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}