// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUMS
// =================================================================
enum Role {
  MEDICO
  ADMINISTRATIVO
}

enum Gender {
  MASCULINO
  FEMENINO
  MASCULINO_DEPORTIVO
  FEMENINO_DEPORTIVO
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum GuideItemType {
  STANDARD
  METABOLIC
  REVITALIZATION
}

enum MealType {
  DESAYUNO
  ALMUERZO
  CENA
  MERIENDAS_POSTRES
}

enum BloodTypeGroup {
  ALL
  O_B
  A_AB
}

enum GeneralGuideType {
  AVOID
  SUBSTITUTE
}

enum DietType {
  NINO
  METABOLICA
  ANTIDIABETICA
  CITOSTATICA
  RENAL
}

enum BoardType {
  FORM_BIOPHYSICS
  FORM_BIOCHEMISTRY
}

// =================================================================
// Modelos de Autenticación y Usuarios (NextAuth.js)
// =================================================================
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(MEDICO)
  accounts      Account[]
  sessions      Session[]
  patients      Patient[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =================================================================
// Modelos de la Aplicación
// =================================================================
model Patient {
  id                  String               @id @default(cuid())
  controlNumber       Int                  @default(autoincrement())
  userId              String
  photo               String?
  nationality         String
  identification      String               @unique
  historyDate         DateTime
  lastName            String
  firstName           String
  birthDate           DateTime
  chronologicalAge    Int
  gender              Gender
  birthPlace          String
  phone               String
  maritalStatus       String
  profession          String
  country             String
  state               String
  city                String
  address             String
  bloodType           String
  email               String
  observations        String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  biophysicsTests     BiophysicsTest[]
  biochemistryTests   BiochemistryTest[]
  orthomolecularTests OrthomolecularTest[]
  appointments        Appointment[]
  guides              PatientGuide[]
  foodPlans           FoodPlan[]
  selectedDiets       DietType[]

  @@map("patients")
}

model Appointment {
  id        String            @id @default(cuid())
  patientId String
  date      DateTime
  reason    String
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model BiophysicsTest {
  id                  String   @id @default(cuid())
  patientId           String
  chronologicalAge    Float
  biologicalAge       Float
  differentialAge     Float
  gender              String
  isAthlete           Boolean  @default(false)
  fatPercentage       Float?
  fatAge              Float?
  bmi                 Float?
  bmiAge              Float?
  digitalReflexes     Float?
  reflexesAge         Float?
  visualAccommodation Float?
  visualAge           Float?
  staticBalance       Float?
  balanceAge          Float?
  skinHydration       Float?
  hydrationAge        Float?
  systolicPressure    Float?
  systolicAge         Float?
  diastolicPressure   Float?
  diastolicAge        Float?
  testDate            DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("biophysics_tests")
}

model BiochemistryTest {
  id                  String   @id @default(cuid())
  patientId           String
  chronologicalAge    Float
  biochemicalAge      Float
  differentialAge     Float
  somatomedin         Float?
  somatomedinAge      Float?
  hba1c               Float?
  hba1cAge            Float?
  insulin             Float?
  insulinAge          Float?
  postPrandial        Float?
  postPrandialAge     Float?
  tgHdlRatio          Float?
  tgHdlRatioAge       Float?
  dhea                Float?
  dheaAge             Float?
  homocysteine        Float?
  homocysteineAge     Float?
  psa                 Float?
  psaAge              Float?
  fsh                 Float?
  fshAge              Float?
  boneDensitometry    Float?
  boneDensitometryAge Float?
  testDate            DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("biochemistry_tests")
}

model OrthomolecularTest {
  id                String   @id @default(cuid())
  patientId         String
  chronologicalAge  Float
  orthomolecularAge Float
  differentialAge   Float
  testDate          DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  aluminio          Float?
  antimonio         Float?
  arsenico          Float?
  bario             Float?
  berilio           Float?
  bismuto           Float?
  cadmio            Float?
  mercurio          Float?
  niquel            Float?
  plata             Float?
  platino           Float?
  plomo             Float?
  talio             Float?
  tinio             Float?
  titanio           Float?
  torio             Float?
  uranio            Float?
  calcio            Float?
  calcioAlt         Float?
  magnesio          Float?
  magnesioAlt       Float?
  sodio             Float?
  potasio           Float?
  potasioAlt        Float?
  cobre             Float?
  cobreAlt          Float?
  zinc              Float?
  zincAlt           Float?
  manganeso         Float?
  manganesoAlt      Float?
  cromo             Float?
  cromoAlt          Float?
  vanadio           Float?
  molibdeno         Float?
  boro              Float?
  yodo              Float?
  litio             Float?
  phosphoro         Float?
  selenio           Float?
  estroncio         Float?
  azufre            Float?
  cobalto           Float?
  hierro            Float?
  germanio          Float?
  rubidio           Float?
  zirconio          Float?
  aluminioAge       Float?
  antimonioAge      Float?
  arsenicoAge       Float?
  barioAge          Float?
  berilioAge        Float?
  bismutoAge        Float?
  cadmioAge         Float?
  mercurioAge       Float?
  niquelAge         Float?
  plataAge          Float?
  platinoAge        Float?
  plomoAge          Float?
  talioAge          Float?
  tinioAge          Float?
  titanioAge        Float?
  torioAge          Float?
  uranioAge         Float?
  calcioAge         Float?
  calcioAltAge      Float?
  magnesioAge       Float?
  magnesioAltAge    Float?
  sodioAge          Float?
  potasioAge        Float?
  potasioAltAge     Float?
  cobreAge          Float?
  cobreAltAge       Float?
  zincAge           Float?
  zincAltAge        Float?
  manganesoAge      Float?
  manganesoAltAge   Float?
  cromoAge          Float?
  cromoAltAge       Float?
  vanadioAge        Float?
  molibdenoAge      Float?
  boroAge           Float?
  yodoAge           Float?
  litioAge          Float?
  phosphoroAge      Float?
  selenioAge        Float?
  estroncioAge      Float?
  azufreAge         Float?
  cobaltoAge        Float?
  hierroAge         Float?
  germanioAge       Float?
  rubidioAge        Float?
  zirconioAge       Float?

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("orthomolecular_tests")
}

// =================================================================
// Modelos para Baremos y Rangos
// =================================================================
model Range {
  id     Int     @id
  minAge Float
  maxAge Float
  boards Board[]

  @@map("ranges")
}

model Board {
  id        String    @id @default(cuid())
  rangeId   Int
  type      BoardType @default(FORM_BIOPHYSICS)
  name      String
  minValue  Float
  maxValue  Float
  inverse   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  range Range @relation(fields: [rangeId], references: [id])

  @@map("boards")
}

// =================================================================
// Modelos para la Guía del Paciente (CORREGIDOS)
// =================================================================
model GuideCategory {
  id    String      @id @default(cuid())
  title String
  type  GuideItemType
  order Int         @default(0)
  items GuideItem[]

  @@map("guide_categories")
}

model GuideItem {
  id         String   @id @default(cuid())
  categoryId String
  name       String
  dose       String?
  isDefault  Boolean  @default(true)
  createdAt  DateTime @default(now())

  category   GuideCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  // La relación inversa a 'PatientGuideSelection' ha sido eliminada.

  @@map("guide_items")
}

model PatientGuide {
  id           String    @id @default(cuid())
  patientId    String
  patient      Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  selections   Json      // Se usa Json para almacenar el formulario.
  observations String?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("patient_guides")
}

// El modelo 'PatientGuideSelection' ha sido eliminado por completo.

// =================================================================
// Modelos para la Guía de Alimentación
// =================================================================
model FoodItem {
  id             String         @id @default(cuid())
  name           String
  mealType       MealType
  bloodTypeGroup BloodTypeGroup @default(ALL)
  isDefault      Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  foodPlanId     String?
  foodPlan       FoodPlan?      @relation(fields: [foodPlanId], references: [id], onDelete: Cascade)

  @@map("food_items")
}

model FoodPlan {
  id           String   @id @default(cuid())
  patientId    String
  observations String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  patient Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)
  items   FoodItem[]

  @@map("food_plans")
}

model GeneralGuideItem {
  id        String           @id @default(cuid())
  text      String
  type      GeneralGuideType
  isDefault Boolean          @default(true)
  createdAt DateTime         @default(now())

  @@map("general_guide_items")
}

model WellnessKey {
  id          String   @id @default(cuid())
  title       String
  description String
  isDefault   Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("wellness_keys")
}

// =================================================================
// Modelos para el Historial de Campañas
// =================================================================
model Campaign {
  id            String    @id @default(cuid())
  name          String
  messageBody   String    @db.Text
  status        String
  channels      String[]
  totalContacts Int
  sentCount     Int       @default(0)
  failedCount   Int       @default(0)
  createdAt     DateTime  @default(now())

  messages      CampaignMessage[]

  @@map("campaigns")
}

model CampaignMessage {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactId   String
  contactName String
  contactInfo String
  channel     String
  status      String
  providerId  String?
  error       String?  @db.Text
  sentAt      DateTime @default(now())

  @@map("campaign_messages")
}