// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUMS
// =================================================================
enum Role {
  MEDICO
  ADMINISTRATIVO
}

enum Gender {
  MASCULINO
  FEMENINO
  MASCULINO_DEPORTIVO
  FEMENINO_DEPORTIVO
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

// Enum para los tipos de categorías de la guía
enum GuideItemType {
  STANDARD
  METABOLIC
  REVITALIZATION
}

// =================================================================
// Modelos de Autenticación y Usuarios (NextAuth.js)
// =================================================================
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(MEDICO)
  accounts      Account[]
  sessions      Session[]
  patients      Patient[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =================================================================
// Modelos de la Aplicación
// =================================================================

model Patient {
  id                String             @id @default(cuid())
  controlNumber     Int                @default(autoincrement())
  userId            String
  photo             String?
  nationality       String
  identification    String             @unique
  historyDate       DateTime
  lastName          String
  firstName         String
  birthDate         DateTime
  chronologicalAge  Int
  gender            Gender
  birthPlace        String
  phone             String
  maritalStatus     String
  profession        String
  country           String
  state             String
  city              String
  address           String
  bloodType         String
  email             String
  observations      String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  biophysicsTests   BiophysicsTest[]
  biochemistryTests BiochemistryTest[]
  appointments      Appointment[]
  guides            PatientGuide[] // Relación con las guías del paciente

  @@map("patients")
}

model Appointment {
  id        String            @id @default(cuid())
  patientId String
  date      DateTime
  reason    String
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model BiophysicsTest {
  id                  String   @id @default(cuid())
  patientId           String
  chronologicalAge    Float
  biologicalAge       Float
  differentialAge     Float
  gender              String
  isAthlete           Boolean  @default(false)
  fatPercentage       Float?
  fatAge              Float?
  bmi                 Float?
  bmiAge              Float?
  digitalReflexes     Float?
  reflexesAge         Float?
  visualAccommodation Float?
  visualAge           Float?
  staticBalance       Float?
  balanceAge          Float?
  skinHydration       Float?
  hydrationAge        Float?
  systolicPressure    Float?
  systolicAge         Float?
  diastolicPressure   Float?
  diastolicAge        Float?
  testDate            DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("biophysics_tests")
}

model BiochemistryTest {
  id                  String   @id @default(cuid())
  patientId           String
  chronologicalAge    Float
  biochemicalAge      Float
  differentialAge     Float
  somatomedin         Float?
  somatomedinAge      Float?
  hba1c               Float?
  hba1cAge            Float?
  insulin             Float?
  insulinAge          Float?
  postPrandial        Float?
  postPrandialAge     Float?
  tgHdlRatio          Float?
  tgHdlRatioAge       Float?
  dhea                Float?
  dheaAge             Float?
  homocysteine        Float?
  homocysteineAge     Float?
  psa                 Float?
  psaAge              Float?
  fsh                 Float?
  fshAge              Float?
  boneDensitometry    Float?
  boneDensitometryAge Float?
  testDate            DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("biochemistry_tests")
}

// =================================================================
// Modelos para Baremos y Rangos
// =================================================================

enum BoardType {
  FORM_BIOPHYSICS
  FORM_BIOCHEMISTRY
}

model Range {
  id     Int     @id
  minAge Float
  maxAge Float
  boards Board[]

  @@map("ranges")
}

model Board {
  id        String    @id @default(cuid())
  rangeId   Int
  type      BoardType @default(FORM_BIOPHYSICS)
  name      String
  minValue  Float
  maxValue  Float
  inverse   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  range Range @relation(fields: [rangeId], references: [id])

  @@map("boards")
}

// =================================================================
// Modelos para la Guía del Paciente
// =================================================================

model GuideCategory {
  id    String      @id @default(cuid())
  title String
  type  GuideItemType
  order Int         @default(0)
  items GuideItem[]

  @@map("guide_categories")
}

model GuideItem {
  id         String   @id @default(cuid())
  categoryId String
  name       String
  dose       String?
  isDefault  Boolean  @default(true)
  createdAt  DateTime @default(now())

  category   GuideCategory           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  selections PatientGuideSelection[]

  @@map("guide_items")
}

model PatientGuide {
  id         String                  @id @default(cuid())
  patientId  String
  guideDate  DateTime
  createdAt  DateTime                @default(now())
  patient    Patient                 @relation(fields: [patientId], references: [id], onDelete: Cascade)
  selections PatientGuideSelection[]

  @@map("patient_guides")
}

model PatientGuideSelection {
  id             String       @id @default(cuid())
  patientGuideId String
  guideItemId    String
  qty            String?
  freq           String?
  custom         String?
  complejoB_cc   String?
  bioquel_cc     String?
  frequency      String?

  patientGuide PatientGuide @relation(fields: [patientGuideId], references: [id], onDelete: Cascade)
  guideItem    GuideItem    @relation(fields: [guideItemId], references: [id], onDelete: Cascade)

  @@map("patient_guide_selections")
}
