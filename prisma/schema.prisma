// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// Modelos de Autenticación y Usuarios (Sin Cambios)
// =================================================================
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("PROFESIONAL")
  accounts      Account[]
  sessions      Session[]
  patients      Patient[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =================================================================
// Modelos de la Aplicación
// =================================================================

model Patient {
  id               String    @id @default(cuid())
  controlNumber    String?   @unique
  firstName        String
  lastName         String
  birthDate        DateTime
  chronologicalAge Int
  gender           String
  email            String?
  phone            String?
  address          String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  biophysicsTests  BiophysicsTest[]
  // ===== INICIO DE LA MODIFICACIÓN =====
  biochemistryTests BiochemistryTest[] // Relación con el nuevo test
  // ===== FIN DE LA MODIFICACIÓN =====

  @@map("patients")
}

// Test Biofísico (Sin Cambios)
model BiophysicsTest {
  id                  String    @id @default(cuid())
  patientId           String
  patient             Patient   @relation(fields: [patientId], references: [id])
  createdAt           DateTime  @default(now())
  chronologicalAge    Int
  biologicalAge       Int
  differentialAge     Int
  gender              String
  isAthlete           Boolean
  fatPercentage       Float?
  fatAge              Float?
  bmi                 Float?
  bmiAge              Float?
  digitalReflexes     Float?
  reflexesAge         Float?
  visualAccommodation Float?
  visualAge           Float?
  staticBalance       Float?
  balanceAge          Float?
  skinHydration       Float?
  hydrationAge        Float?
  systolicPressure    Float?
  systolicAge         Float?
  diastolicPressure   Float?
  diastolicAge        Float?

  @@map("biophysics_tests")
}


// ===== INICIO DE LA MODIFICACIÓN: Nuevo Modelo para Test Bioquímico =====
model BiochemistryTest {
  id                  String    @id @default(cuid())
  patientId           String
  patient             Patient   @relation(fields: [patientId], references: [id])
  createdAt           DateTime  @default(now())
  chronologicalAge    Int
  biologicalAge       Float
  differentialAge     Float

  // Campos específicos del test
  somatomedinC        Float
  somatomedinCAge     Float
  hba1c               Float
  hba1cAge            Float
  insulinBasal        Float
  insulinBasalAge     Float
  dheaS               Float
  dheaSAge            Float
  freeTestosterone    Float
  freeTestosteroneAge Float
  shbg                Float
  shbgAge             Float
  prostateAntigen     Float
  prostateAntigenAge  Float
  uricAcid            Float
  uricAcidAge         Float
  ferritin            Float
  ferritinAge         Float
  vitaminD            Float
  vitaminDAge         Float
  homocysteine        Float
  homocysteineAge     Float
  pcr                 Float
  pcrAge              Float
  fibrinogen          Float
  fibrinogenAge       Float
  triglycerides       Float
  triglyceridesAge    Float
  hdl                 Float
  hdlAge              Float
  tgHdlRatio          Float
  tgHdlRatioAge       Float

  @@map("biochemistry_tests")
}
// ===== FIN DE LA MODIFICACIÓN =====


// =================================================================
// Modelos para Baremos y Rangos
// =================================================================

// ===== INICIO DE LA MODIFICACIÓN: Añadir nuevo tipo de baremo =====
enum BoardType {
  FORM_BIOPHYSICS
  FORM_BIOCHEMISTRY
}
// ===== FIN DE LA MODIFICACIÓN =====

model Range {
  id      Int     @id
  minAge  Int
  maxAge  Int
  boards  Board[]

  @@map("ranges")
}

model Board {
  id        String    @id @default(cuid())
  name      String
  minValue  Float
  maxValue  Float
  inverse   Boolean   @default(false)
  rangeId   Int
  range     Range     @relation(fields: [rangeId], references: [id])
  // ===== INICIO DE LA MODIFICACIÓN: Usar el nuevo Enum =====
  type      BoardType
  // ===== FIN DE LA MODIFICACIÓN =====

  @@map("boards")
}
