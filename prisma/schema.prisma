// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUMS - Para consistencia y seguridad de tipos
// =================================================================
enum Role {
  PROFESIONAL
  ADMINISTRATIVO
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDIENTE
  CONFIRMADA
  CANCELADA
  COMPLETADA
}

// =================================================================
// Modelos de Autenticación y Usuarios
// =================================================================
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role          @default(PROFESIONAL) // Usando el Enum Role
  accounts      Account[]
  sessions      Session[]
  patients      Patient[]
  appointments  Appointment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =================================================================
// Modelos de la Aplicación
// =================================================================

model Patient {
  id                String             @id @default(cuid())
  controlNumber     String?            @unique
  firstName         String
  lastName          String
  birthDate         DateTime
  chronologicalAge  Int
  gender            Gender             // Usando el Enum Gender
  email             String?
  phone             String?
  address           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            String
  user              User               @relation(fields: [userId], references: [id])
  biophysicsTests   BiophysicsTest[]
  biochemistryTests BiochemistryTest[]
  appointments      Appointment[]

  @@map("patients")
}

model Appointment {
  id             String          @id @default(cuid())
  patientId      String
  patient        Patient         @relation(fields: [patientId], references: [id])
  professionalId String
  professional   User            @relation(fields: [professionalId], references: [id])
  date           DateTime
  status         AppointmentStatus @default(PENDIENTE) // Usando el Enum AppointmentStatus
  notes          String?         @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("appointments")
}

model BiophysicsTest {
  id                  String   @id @default(cuid())
  patientId           String
  patient             Patient  @relation(fields: [patientId], references: [id])
  createdAt           DateTime @default(now())
  chronologicalAge    Int
  biologicalAge       Int
  differentialAge     Int
  gender              Gender   // Usando el Enum Gender
  isAthlete           Boolean
  fatPercentage       Float?
  fatAge              Float?
  bmi                 Float?
  bmiAge              Float?
  digitalReflexes     Float?
  reflexesAge         Float?
  visualAccommodation Float?
  visualAge           Float?
  staticBalance       Float?
  balanceAge          Float?
  skinHydration       Float?
  hydrationAge        Float?
  systolicPressure    Float?
  systolicAge         Float?
  diastolicPressure   Float?
  diastolicAge        Float?

  @@map("biophysics_tests")
}

model BiochemistryTest {
  id                  String   @id @default(cuid())
  patientId           String
  patient             Patient  @relation(fields: [patientId], references: [id])
  createdAt           DateTime @default(now())
  chronologicalAge    Int
  biologicalAge       Float
  differentialAge     Float
  somatomedinC        Float?
  somatomedinCAge     Float?
  hba1c               Float?
  hba1cAge            Float?
  insulinBasal        Float?
  insulinBasalAge     Float?
  dheaS               Float?
  dheaSAge            Float?
  freeTestosterone    Float?
  freeTestosteroneAge Float?
  shbg                Float?
  shbgAge             Float?
  prostateAntigen     Float?
  prostateAntigenAge  Float?
  uricAcid            Float?
  uricAcidAge         Float?
  ferritin            Float?
  ferritinAge         Float?
  vitaminD            Float?
  vitaminDAge         Float?
  homocysteine        Float?
  homocysteineAge     Float?
  pcr                 Float?
  pcrAge              Float?
  fibrinogen          Float?
  fibrinogenAge       Float?
  triglycerides       Float?
  triglyceridesAge    Float?
  hdl                 Float?
  hdlAge              Float?
  tgHdlRatio          Float?
  tgHdlRatioAge       Float?

  @@map("biochemistry_tests")
}

// =================================================================
// Modelos para Baremos y Rangos (Aún necesarios para Bioquímica)
// =================================================================

enum BoardType {
  FORM_BIOPHYSICS
  FORM_BIOCHEMISTRY
}

model Range {
  id     Int     @id
  minAge Int
  maxAge Int
  boards Board[]

  @@map("ranges")
}

model Board {
  id       String    @id @default(cuid())
  name     String
  minValue Float
  maxValue Float
  inverse  Boolean   @default(false)
  rangeId  Int
  range    Range     @relation(fields: [rangeId], references: [id])
  type     BoardType

  @@map("boards")
}
